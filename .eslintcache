[{"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\index.js":"1","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\App.js":"2","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reportWebVitals.js":"3","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\store.js":"4","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\CountingPage\\TasbihPage.js":"5","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\Load.js":"6","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\main.js":"7","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\HomePage.js":"8","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Firebase\\firebase.js":"9","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\action\\action.js":"10","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\users.js":"11","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\settings.js":"12","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\firebaseManager.js":"13","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\Body.js":"14","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Header\\Header.js":"15","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\SignIn.js":"16","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\History.js":"17","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihCard.js":"18","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihDotedCard.js":"19","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\AddBody.js":"20","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\NavigationMenu\\SideNav\\SideNav.js":"21","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\HistoryBlockTemplate\\Template.js":"22","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\LoadingScreen.js":"23","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\GoogleSignIn.js":"24","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\GuestSignInModel.js":"25"},{"size":712,"mtime":1623325884176,"results":"26","hashOfConfig":"27"},{"size":320,"mtime":1623304155214,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1622439681440,"results":"29","hashOfConfig":"27"},{"size":268,"mtime":1623325339509,"results":"30","hashOfConfig":"27"},{"size":233,"mtime":1623044797541,"results":"31","hashOfConfig":"27"},{"size":3463,"mtime":1632486577552,"results":"32","hashOfConfig":"27"},{"size":266,"mtime":1623649608328,"results":"33","hashOfConfig":"27"},{"size":1148,"mtime":1632483976806,"results":"34","hashOfConfig":"27"},{"size":736,"mtime":1628572751983,"results":"35","hashOfConfig":"27"},{"size":471,"mtime":1628486338951,"results":"36","hashOfConfig":"27"},{"size":215,"mtime":1623318494907,"results":"37","hashOfConfig":"27"},{"size":1084,"mtime":1632487080719,"results":"38","hashOfConfig":"27"},{"size":362,"mtime":1623675993622,"results":"39","hashOfConfig":"27"},{"size":2868,"mtime":1632487186833,"results":"40","hashOfConfig":"27"},{"size":2630,"mtime":1632304055450,"results":"41","hashOfConfig":"27"},{"size":4244,"mtime":1632487052416,"results":"42","hashOfConfig":"27"},{"size":3264,"mtime":1632468752078,"results":"43","hashOfConfig":"27"},{"size":3061,"mtime":1632483646900,"results":"44","hashOfConfig":"27"},{"size":484,"mtime":1632298714881,"results":"45","hashOfConfig":"27"},{"size":3651,"mtime":1632380847218,"results":"46","hashOfConfig":"27"},{"size":3060,"mtime":1632487005249,"results":"47","hashOfConfig":"27"},{"size":1106,"mtime":1623675432977,"results":"48","hashOfConfig":"27"},{"size":726,"mtime":1632296608496,"results":"49","hashOfConfig":"27"},{"size":3729,"mtime":1632487022611,"results":"50","hashOfConfig":"27"},{"size":4430,"mtime":1632381145880,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"190qrkf",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\index.js",[],["112","113"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\App.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reportWebVitals.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\store.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\CountingPage\\TasbihPage.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\Load.js",["114","115","116"],"import React, { useState, useEffect } from \"react\";\r\nimport { provider, auth } from \"../Firebase/firebase\";\r\nimport HomePage from \"../Home/HomePage.js\";\r\nimport SignInPage from \"../SignIn/SignIn\";\r\nimport LoadingScreen from \"./LoadingScreen\"\r\n\r\nimport db from \"../Firebase/firebase.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setUpUserData,\r\n  updateSettings,\r\n  recoredUnSubCall,\r\n  execCalls,\r\n  resetSettings\r\n} from \"../../action/action\";\r\n\r\nconst Load = () => {\r\n  const dispatch = useDispatch();\r\n  const currUser = useSelector(state => state.User);\r\n  const settings = useSelector(state => state.Settings);\r\n\r\n  const [userState, setUserState] = useState(\"\");\r\n\r\n  const LogOutUser = () => {\r\n    setUserState(\"LOS\");\r\n    dispatch(execCalls());\r\n    dispatch(resetSettings());\r\n\r\n    if (currUser.isAnonymous) {\r\n      auth\r\n        .signOut()\r\n        .then(() => {\r\n          resetUser();\r\n          console.log(\"user Removed\");\r\n        })\r\n        .catch(er => console.log(er));\r\n    } else {\r\n      auth.signOut().then(() => {\r\n        resetUser();\r\n        console.log(\"user Logout Successfully\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const resetUser = () => {\r\n    dispatch(setUpUserData(null));\r\n    dispatch(updateSettings({ loading: false }));\r\n    setUserState(\"LOR\");\r\n  };\r\n\r\n  const setCurrentUser = async user => {\r\n    if (user) {\r\n      var userType = user.isAnonymous ? \"GuestUsers\" : \"Users\";\r\n      dispatch(updateSettings({ loading: true, userType: userType }));\r\n      console.log(userType);\r\n      var unSub = db.collection(userType).doc(user.uid).onSnapshot(async (data) => {\r\n        if (data.data()) {\r\n          var optionExist = data.data().Deleted ? data.data().Deleted : false;\r\n          if (!optionExist) {\r\n            let unSubSet = data.ref.collection(\"Settings\").onSnapshot(\r\n              snap => {\r\n                if (!snap.empty) {\r\n                  dispatch(\r\n                    updateSettings({\r\n                      isUserIn: true,\r\n                      settings: snap.docs[0].data(),\r\n                      path: snap.docs[0].ref.path\r\n                    })\r\n                  );\r\n                } else {\r\n                  data.ref.collection(\"Settings\").add(settings.settings);\r\n                }\r\n              },\r\n              err => {\r\n                console.log(err);\r\n              }\r\n            );\r\n\r\n            dispatch(setUpUserData(user));\r\n            dispatch(recoredUnSubCall(unSubSet));\r\n            dispatch(updateSettings({ loading: false }));\r\n\r\n          } else {\r\n            dispatch(updateSettings({ loading: false }));\r\n          }\r\n        } else {\r\n          dispatch(updateSettings({ loading: false }));\r\n        }\r\n      }, err => console.log(err));\r\n      dispatch(recoredUnSubCall(unSub));\r\n    }\r\n    else {\r\n      console.log(\"user not found\");\r\n      if (userState === \"LOR\" || userState === \"\") {\r\n        dispatch(\r\n          updateSettings({\r\n            loading: false\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const setUser = () => {\r\n    setUserState(\"LOR\");\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const unsub = await auth.onAuthStateChanged(user => {\r\n      setCurrentUser(user);\r\n    });\r\n    return unsub;\r\n  }, []);\r\n\r\n  let loadPage = currUser && !settings.loading ? <HomePage click={LogOutUser} /> : <SignInPage click={setUser} />;\r\n\r\n  return settings.loading ? <LoadingScreen /> : loadPage;\r\n};\r\n\r\nexport default Load;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\main.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\HomePage.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Firebase\\firebase.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\action\\action.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\users.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\settings.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\firebaseManager.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\Body.js",["117"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./HomePage.css\";\r\nimport TasbihDotedCard from \"./TasbihDotedCard.js\";\r\nimport TasbihCard from \"./TasbihCard.js\";\r\nimport ModalShow from \"../ExtraComps/AddBody.js\";\r\nimport db from \"../Firebase/firebase.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { recoredUnSubCall } from \"../../action/action\";\r\n\r\nconst Body = props => {\r\n  const [noOfTasbih, setNoOfTasbih] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const userType = useSelector(state => state.Settings.userType);\r\n\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  const currentUser = useSelector(state => state.User);\r\n  const totalTasbihsCount = useSelector(s => s.Settings.totalTasbihsCount);\r\n  const dispatch = useDispatch();\r\n\r\n  const setModalView = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  const appendNewBlock = async (tasbihName, tid) => {\r\n    if (tasbihName) {\r\n      setShow(false);\r\n      var user = await db.collection(userType).doc(currentUser.uid).get();\r\n      await user.ref.collection(\"Tasbihs\").add({\r\n        Status: \"Running\",\r\n        Name: tasbihName,\r\n        TasbihID: tid,\r\n        count: 0\r\n      });\r\n      console.log(\"Tasbih Added To Collection\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setNoOfTasbih([]);\r\n\r\n    let unSubs = db.collection(userType).doc(currentUser.uid).collection(\"Tasbihs\").onSnapshot(tasbih => {\r\n      var noOfTasbihs = tasbih.docs.map(data => {\r\n        let _data = data.data();\r\n        return {\r\n          ID: data.id,\r\n          Name: _data.Name,\r\n          Count: _data.count,\r\n          Status: _data.Status,\r\n          path: data.ref.path,\r\n          tID: data.data().TasbihID\r\n        };\r\n      });\r\n\r\n      setNoOfTasbih(noOfTasbihs);\r\n      setLoading(false);\r\n    }, err => {\r\n      unSubs();\r\n    });\r\n\r\n    dispatch(recoredUnSubCall(unSubs));\r\n  }, [currentUser]);\r\n\r\n  return (\r\n    <div className=\"outer-shell\">\r\n      <div className=\"home-body\">\r\n        {noOfTasbih.map(x => {\r\n          return (\r\n            <TasbihCard\r\n              key={x.ID}\r\n              name={x.Name}\r\n              count={x.Count}\r\n              status={x.Status}\r\n              path={x.path}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {isLoading ? (\r\n          <div className=\"no-more-tasbihs flex\">Loading Your Tasbihs...</div>\r\n        ) : noOfTasbih.length >= totalTasbihsCount ? (\r\n          <span className=\"flex no-more-tasbihs\">\r\n            No More Tasbihs Available\r\n          </span>\r\n        ) : (\r\n              <TasbihDotedCard click={setModalView} />\r\n            )}\r\n        <ModalShow\r\n          displayedIds={noOfTasbih.map(t => t.tID.replace(\" \", \"\"))}\r\n          showModal={show}\r\n          click={appendNewBlock}\r\n          hideModal={setModalView}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Header\\Header.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\SignIn.js",["118","119"],"import React, { useEffect } from \"react\";//useState,\r\nimport db from \"../Firebase/firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSettings, setUpUserData } from \"../../action/action\";\r\nimport { provider, auth } from \"../Firebase/firebase\";\r\n\r\nimport LoadingScreen from \"../LoadPage/LoadingScreen\"\r\n//import { Form, Button } from \"react-bootstrap\";\r\n\r\nconst SignIn = props => {\r\n  const dispatch = useDispatch();\r\n  const settings = useSelector(s => s.Settings);\r\n  const currUser = useSelector(s => s.User);\r\n\r\n  //const [username, setUsername] = useState(\"\");\r\n  //const [isUserNameLoginVisible, setUserNameLogin] = useState(false);\r\n\r\n  //Guest User Sign In\r\n  const GuestSignIn = async () => {\r\n    dispatch(updateSettings({ loading: true }));\r\n    console.log(\"Guest sign in started\");\r\n\r\n    await auth.signInAnonymously().then(async (loginUser) => {\r\n      dispatch(setUpUserData(loginUser.user));\r\n\r\n      var noOfGuests = await db.collection(\"NoOfGuests\").get();\r\n      var newCount = noOfGuests.docs[0].data().count + 1;\r\n      var name = \"Guest\" + newCount;\r\n      await loginUser.user.updateProfile({\r\n        displayName: name,\r\n        uid: new Date().getTime()\r\n      });\r\n\r\n      await db.collection(\"GuestUsers\").doc(loginUser.user.uid).set({ Name: name, uid: loginUser.user.uid, Deleted: false });\r\n      await noOfGuests.docs[0].ref.update({ count: newCount });\r\n\r\n      var gUser = await db.collection(\"GuestUsers\").doc(loginUser.user.uid).get();\r\n      var tasbihs = await db.collection(\"Tasbihs\").where(\"Visible\", \"==\", true).get()\r\n      var allTasbihs = tasbihs.docs.map(doc => doc);\r\n      var randPick = Math.floor(Math.random() * allTasbihs.length);\r\n\r\n      await gUser.ref.collection(\"Tasbihs\").add({\r\n        count: 0,\r\n        TasbihID: allTasbihs[randPick].id,\r\n        Name: allTasbihs[randPick].data().Name,\r\n        Status: \"Running\"\r\n      });\r\n      var set = await gUser.ref.collection(\"Settings\").add(settings.settings)\r\n      console.log(\"Guest sign in ended\");\r\n      dispatch(\r\n        updateSettings({\r\n          isUserIn: true,\r\n          path: set.path,\r\n          // loading: false,\r\n          totalTasbihsCount: allTasbihs.length\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  //Google Sign In\r\n  // const LoginUser = async () => {\r\n  //   auth.signInWithPopup(provider).then(async (res) => {\r\n  //     //\r\n  //     var retUser = await db.collection(\"Users\").doc(res.user.uid).get();\r\n  //     if (!retUser.exists) {\r\n  //       await db.collection(\"Users\").doc(retUser.id).set({ Name: res.user.displayName, uid: retUser.id })\r\n  //       var updatedUserData = await db.collection(\"Users\").doc(retUser.uid).get()\r\n  //       var tasbihData = await db.collection(\"Tasbihs\").where(\"Visible\", \"==\", true).get()\r\n\r\n  //       var allTasbihs = tasbihData.docs.map(doc => doc);\r\n  //       var randPick = Math.floor(\r\n  //         Math.random() * allTasbihs.length\r\n  //       );\r\n\r\n  //       await updatedUserData.ref.collection(\"Tasbihs\").add({\r\n  //         count: 0,\r\n  //         TasbihID: allTasbihs[randPick].id,\r\n  //         Name: allTasbihs[randPick].data().Name,\r\n  //         Status: \"Running\"\r\n  //       });\r\n  //       await updatedUserData.ref.collection(\"Settings\").add(settings.settings);\r\n\r\n  //       dispatch(setUpUserData(res.user));\r\n\r\n  //       dispatch(\r\n  //         updateSettings({\r\n  //           isUserIn: true,\r\n  //           loading: false,\r\n  //           totalTasbihsCount: allTasbihs.length\r\n  //         })\r\n  //       );\r\n  //     } else {\r\n  //       console.log(\"User found\");\r\n  //       dispatch(updateSettings({ loading: false }));\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    console.log(\"sign in useEffect Called\")\r\n    GuestSignIn();\r\n  }, [currUser]);\r\n\r\n  return (\r\n    // <div className=\"user-sign-in flex\">\r\n    //   <div className=\"sign-in-with\">\r\n    //     <button onClick={LoginUser} className=\"btn\">\r\n    //       Sign In With Google\r\n    //     </button>\r\n    //     <p >-- OR --</p>\r\n    //     <button className=\"skip-btn btn\" onClick={GuestSignIn}>\r\n    //       Sign up as a guest\r\n    //     </button>\r\n    //   </div>\r\n    // </div>\r\n    <LoadingScreen />\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\History.js",["120"],"import React, { useState, useEffect } from 'react'\r\nimport './History.css'\r\nimport db from '../Firebase/firebase';\r\nimport HistoryTemplate from './HistoryBlockTemplate/Template'\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { recoredUnSubCall } from '../../action/action'\r\n\r\nconst History = props => {\r\n    const [tasbihsHistory, setTasbihHistory] = useState([]);\r\n    const [totalCounts, setTotalCounts] = useState(0);\r\n\r\n    const currUser = useSelector(state => state.User);\r\n    const dispatch = useDispatch();\r\n\r\n    const DeletePermenantData = (path) => {\r\n        db.doc(path).update({ deleterPermanently: true }).then((data) => {\r\n            console.log(data);\r\n            console.log(\"Tasbih deleted Permenantly\")\r\n        });\r\n    }\r\n\r\n    const RestoreTasbih = () => {\r\n        console.log(\"Tasbih Restored Successfully\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.pageName('History', \"history\");\r\n        if (!currUser.isAnonymous) {\r\n            db.collection('Users').doc(currUser.uid).get().then(userData => {\r\n                let unSubs = userData.ref.collection(\"HistoryTasbihs\").orderBy('deletedTime', 'desc').onSnapshot(tasbihData => {\r\n                    let counts = 0;\r\n                    const historyTasbihs = tasbihData.docs.map(doc => {\r\n                        counts += doc.data().counts;\r\n                        return { id: doc.id, path: doc.ref.path, ...doc.data() };\r\n                    });\r\n\r\n                    setTotalCounts(counts)\r\n                    setTasbihHistory(historyTasbihs);\r\n                }, er => console.log(er));\r\n\r\n                dispatch(recoredUnSubCall(unSubs));\r\n\r\n            });\r\n        }\r\n        else {\r\n            db.collection('GuestUsers').doc(currUser.uid).get().then(userData => {\r\n                var unSubs = userData.ref.collection(\"HistoryTasbihs\").orderBy('deletedTime', 'desc').onSnapshot(tasbihData => {\r\n                    let counts = 0;\r\n                    const historyTasbihs = tasbihData.docs.map(doc => {\r\n                        counts += doc.data().counts;\r\n                        return { id: doc.id, path: doc.ref.path, ...doc.data() };\r\n                    });\r\n\r\n                    setTotalCounts(counts)\r\n                    setTasbihHistory(historyTasbihs);\r\n\r\n                }, er => console.log(er));\r\n\r\n                dispatch(recoredUnSubCall(unSubs));\r\n            });\r\n        }\r\n    }, []);\r\n\r\n\r\n    var renderComp = tasbihsHistory.length > 0 ? (\r\n        tasbihsHistory.map(th => {\r\n            if (th.deleterPermanently)\r\n                return <HistoryTemplate key={th.id} name={th.tasbihName} path={th.path} counts={th.counts} />\r\n            else\r\n                return <HistoryTemplate key={th.id} name={th.tasbihName} path={th.path} counts={th.counts} delete={DeletePermenantData} restore={RestoreTasbih} />\r\n        })\r\n    ) : (\r\n            < span className=\"flex no-more-tasbihs\" > No history found</span>\r\n        );\r\n\r\n    return (\r\n        <>\r\n        <div className='history-tasbih-counter'>\r\n            <div className='history-counter'>\r\n                <p>Total:</p>\r\n                {totalCounts}\r\n            </div>\r\n        </div>\r\n        {renderComp }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default History\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihCard.js",["121"],"import React, { useEffect, useState } from \"react\";\r\nimport db from \"../Firebase/firebase\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { BiReset } from \"react-icons/bi\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nconst TasbihCard = props => {\r\n  const [counts, setCounts] = useState(props.count);\r\n  const name = props.name;\r\n  const status = props.status;\r\n  const path = props.path;\r\n\r\n  const uid = useSelector(state => state.User.uid);\r\n  const layout = useSelector(state => state.Settings.settings.Layout);\r\n\r\n  const RemoveTasbih = async () => {\r\n    try {\r\n      if (uid !== \"null\" && counts > 0) {\r\n\r\n        var userDocPath = path.split(\"/\")[0];\r\n        var tasbihData = await db.doc(path).get();\r\n        var userData = await db.collection(userDocPath).doc(uid).get();\r\n        await userData.ref.collection(\"HistoryTasbihs\").add(historyDataTemplate(tasbihData.data(), \"delete\"))\r\n        await tasbihData.ref.delete();\r\n      }\r\n\r\n      console.log(\"Tasbih Has Been Removed\");\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const historyDataTemplate = (data, type) => {\r\n    return {\r\n      counts: data.count,\r\n      deletedTime: new Date(),\r\n      deleterPermanently: false,\r\n      operationType: type,\r\n      tasbihId: data.TasbihID,\r\n      tasbihName: data.Name\r\n    };\r\n  };\r\n\r\n  const ResetTasbih = async () => {\r\n    if (counts > 0) {\r\n      var userDocName = path.split(\"/\")[0];\r\n      var tasbihData = await db.doc(path).get();\r\n      var user = await db.collection(userDocName).doc(uid).get();\r\n      if (user) {\r\n        await user.ref.collection(\"HistoryTasbihs\").add(historyDataTemplate(tasbihData.data(), \"reset\"));\r\n        tasbihData.ref.update({ count: 0 });\r\n        setCounts(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const increseCounter = () => {\r\n    var newCount = counts + 1;\r\n    if (path !== \"\") {\r\n      db.doc(path).get().then(tasbihData => {\r\n        tasbihData.ref.update({ count: newCount });\r\n      });\r\n    }\r\n    setCounts(newCount);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (path !== \"\") {\r\n        let unSub = db.doc(path).onSnapshot(\r\n          tasbihData => {\r\n            if (tasbihData.data()) setCounts(tasbihData.data().count);\r\n          },\r\n          err => {\r\n            unSub();\r\n          }\r\n        );\r\n      }\r\n    },\r\n    [path]\r\n  );\r\n\r\n  return (\r\n    <div className={layout + \" tasbih-card-shell\"}>\r\n      <div className=\"tasbih-card-inner\">\r\n        <div className=\"header-card\">\r\n          <div className=\"tasbih-name\">{name}</div>\r\n        </div>\r\n        <div className=\"middle-card flex\">\r\n          <div className=\"tasbih-counts flex\" onClick={increseCounter}>{counts}</div>\r\n          <div className=\"side-panel\">\r\n            <span className=\"tasbih-remove\" onClick={RemoveTasbih}>\r\n              <RiDeleteBin5Line />\r\n            </span>\r\n            <span className=\"tasbih-reset\" onClick={ResetTasbih}>\r\n              <BiReset />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default TasbihCard;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihDotedCard.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\AddBody.js",["122","123","124"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Dropdown, Form } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport db from \"../Firebase/firebase.js\";\r\nimport \"./modal.css\";\r\n\r\nimport { updateSettings } from \"../../action/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst AddBody = props => {\r\n  const [name, setName] = useState(\"Choose Tasbih\");\r\n  const [noOfTasbihs, setNoOfTasbih] = useState([]);\r\n  const [tid, setTID] = useState(\"None\");\r\n  const userDeleted = props.userDeleted;\r\n\r\n  const settings = useSelector(s => s.Settings);\r\n  const dispach = useDispatch();\r\n\r\n  const handleClose = () => {\r\n    props.hideModal();\r\n  };\r\n\r\n  const handleAddData = () => {\r\n    if (name !== \"\") {\r\n      props.click(name, tid);\r\n      setName(\"Choose Tasbih\");\r\n    } else {\r\n      alert(\"Select Tasbih First\");\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (obj, e) => {\r\n    e.preventDefault();\r\n\r\n    var val = noOfTasbihs.filter(function (item) {\r\n      return item.Name === e.target.text;\r\n    });\r\n    setName(e.target.text);\r\n    console.log(val);\r\n    setTID(val[0].ID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let unSubs = db\r\n      .collection(\"Tasbihs\")\r\n      .where(\"Visible\", \"==\", true)\r\n      .onSnapshot(\r\n      snap => {\r\n        var noOfTasbihs = snap.docs.map(doc => {\r\n          return { ID: doc.id, Name: doc.data().Name };\r\n        });\r\n\r\n        dispach(\r\n          updateSettings({\r\n            totalTasbihsCount: noOfTasbihs.length\r\n          })\r\n        );\r\n        setNoOfTasbih(noOfTasbihs);\r\n\r\n        if (userDeleted) {\r\n          unSubs();\r\n        }\r\n      },\r\n      er => console.log(er)\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <Modal show={props.showModal} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Select Tasbih</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {\r\n          <div className=\"add-tasbih-name\" key=\"0\">\r\n            <div className=\"tasbih\">\r\n              {/* <select onChange={handleOnChange}>\r\n                <option>Choose Tasbih</option>\r\n                {noOfTasbihs.map(tasbih => {\r\n                  var disable = props.displayedIds.filter(t => {\r\n                    return t === tasbih.ID ? true : false;\r\n                  });\r\n\r\n                  return (\r\n                    <option disabled={disable[0]} key={tasbih.ID}>\r\n                      {tasbih.Name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select> */}\r\n\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                  {name}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  {noOfTasbihs.map(tasbih => {\r\n                    var disable = props.displayedIds.filter(t => {\r\n                      return t === tasbih.ID ? true : false;\r\n                    });\r\n\r\n                    return (\r\n                      <Dropdown.Item\r\n                        onSelect={handleOnChange}\r\n                        disabled={disable[0]}\r\n                        key={tasbih.ID}\r\n                      >\r\n                        {tasbih.Name}\r\n                      </Dropdown.Item>\r\n                    );\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        }\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"success\" className=\"save-btn\" onClick={handleAddData}>\r\n          Add\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddBody;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\NavigationMenu\\SideNav\\SideNav.js",["125"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCamera } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport GoogleSignIn from \"../../SignIn/GoogleSignIn\";\r\n\r\nimport \"./SideNav.css\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst SideNav = props => {\r\n  const userDisplayName = useSelector(s => s.User.displayName);\r\n  const profilePic = useSelector(s => s.User.photoURL);\r\n  const isUserAnonymous = useSelector(s => s.User.isAnonymous);\r\n  const [profileDetails, setProfileDetails] = useState({});\r\n\r\n  const setPageConfigs = (pageConfig, activePage) => {\r\n    props.navMan();\r\n    props.setPageName(pageConfig, activePage);\r\n  };\r\n\r\n  const onChange = e => {\r\n    e.preventDefault();\r\n    const reader = new FileReader();\r\n    const file = e.target.files[0];\r\n    reader.onloadend = () => {\r\n      setProfileDetails({\r\n        file: file,\r\n        imagePreviewUrl: reader.result\r\n      });\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  return (\r\n    <div className={props.navClass}>\r\n      <div className=\"profile-picture-box\">\r\n        <label htmlFor=\"photo-upload\" className=\"custom-img-upload\">\r\n          <span className=\"overlay\">\r\n            <img htmlFor=\"photo-upload\" className=\"img-upload\" alt=\"img\" src={profilePic ? profilePic : \"favicon.jpg\"} />\r\n            <FontAwesomeIcon className=\"profile-camera\" icon={faCamera} />\r\n          </span>\r\n          <input id=\"photo-upload\" type=\"file\" onChange={onChange} />\r\n        </label>\r\n        <span className=\"user-name\">{userDisplayName ? userDisplayName : \"loading...\"}</span>\r\n      </div>\r\n      <div className=\"content flex\">\r\n        <div className={props.activePage + \" home-page\"}>\r\n          <span\r\n            className=\"home-page-btn content-btn\"\r\n            onClick={() => setPageConfigs(\"My Tasbihs\", \"homepage\")}\r\n          >\r\n            <Link to=\"/\">My Tasbihs</Link>\r\n          </span>\r\n        </div>\r\n        <div className={props.activePage + \" tasbih-history\"}>\r\n          <span\r\n            className=\"tasbih-history-btn content-btn\"\r\n            onClick={() => setPageConfigs(\"History\", \"history\")}\r\n          >\r\n            <Link to=\"/history\">Tasbih History</Link>\r\n          </span>\r\n        </div>\r\n        <div className={props.activePage + \" req-tasbih\"} disable='diasabled'>\r\n          <span\r\n            className=\"tasbih-history-btn content-btn\"\r\n            onClick={() => setPageConfigs(\"Request\", \"request\")}\r\n          >\r\n            <Link to=\"/request-tasbih\">Request Tasbih</Link>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"footer flex flex-align-bottom\">\r\n        {!isUserAnonymous ? (\r\n          <span className=\"log-out-btn\">\r\n            {<button onClick={props.click}>Log Out</button>}\r\n          </span>\r\n        ) : (\r\n\r\n            <span className=\"google-sign-up\">\r\n              <GoogleSignIn />\r\n            </span>\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideNav;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\HistoryBlockTemplate\\Template.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\LoadingScreen.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\GoogleSignIn.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\GuestSignInModel.js",["126","127","128"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Dropdown, Form } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport db from \"../Firebase/firebase.js\";\r\nimport { auth } from \"../Firebase/firebase\";\r\n\r\nimport \"./guestSignIn.css\";\r\n\r\nimport { updateSettings, setUpUserData } from \"../../action/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst GuestSignInModel = props => {\r\n    const [username, setUsername] = useState(\"Choose Tasbih\");\r\n\r\n    const settings = useSelector(s => s.Settings);\r\n    const currUser = useSelector(s => s.User);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = () => {\r\n        props.hideModal();\r\n    };\r\n\r\n    const signInGuestUser = () => {\r\n        dispatch(updateSettings({ loading: true }));\r\n        db\r\n            .collection(\"GuestUsers\")\r\n            .where(\"Name\", \"==\", username)\r\n            .where(\"Deleted\", \"==\", false)\r\n            .get()\r\n            .then(data => {\r\n                if (!data.empty) {\r\n                    console.log(\"account found\")\r\n                    auth.signInAnonymously().then(loginUser => {\r\n                        const ref = data.docs[0].ref;\r\n                        db\r\n                            .collection(\"GuestUsers\")\r\n                            .doc(loginUser.user.uid)\r\n                            .set({\r\n                                Name: data.docs[0].data().Name,\r\n                                uid: loginUser.user.uid,\r\n                                Deleted: false\r\n                            })\r\n                            .then(userData => {\r\n                                ref.update({ Deleted: true });\r\n                                asyncFunc(ref, loginUser.user);\r\n                            });\r\n                    });\r\n                } else {\r\n                    console.log(\"User Does Not Exists\");\r\n                    dispatch(updateSettings({ loading: false }));\r\n                }\r\n            })\r\n            .catch(er => {\r\n                dispatch(updateSettings({ loading: false }));\r\n                console.log(er);\r\n            });\r\n    };\r\n\r\n    const asyncFunc = async (res, curretUser) => {\r\n        const tasbihs = await res.collection(\"Tasbihs\").get();\r\n        const set = await res.collection(\"Settings\").get();\r\n        const historyTasbihs = await res.collection(\"HistoryTasbihs\").get();\r\n\r\n        db\r\n            .collection(\"GuestUsers\")\r\n            .doc(curretUser.uid)\r\n            .get()\r\n            .then(doc => {\r\n                res.delete();\r\n                doc.ref\r\n                    .collection(\"Settings\")\r\n                    .get()\r\n                    .then(doc => {\r\n                        doc.docs[0].ref.delete();\r\n                    });\r\n                extractData(doc.ref, tasbihs, \"Tasbihs\");\r\n                extractData(doc.ref, set, \"Settings\");\r\n                extractData(doc.ref, historyTasbihs, \"HistoryTasbihs\");\r\n\r\n                dispatch(setUpUserData(curretUser));\r\n            });\r\n    };\r\n\r\n    const extractData = (ref, data, type) => {\r\n        data.docs.forEach(data => {\r\n            ref.collection(type).add(data.data());\r\n        });\r\n    };\r\n\r\n    const setusername = e => {\r\n        setUsername(e.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Find Account</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"sign-in-with-username\">\r\n                    <Form>\r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control\r\n                                onChange={setusername}\r\n                                type=\"text\"\r\n                                placeholder=\"Your Username\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"success\" className=\"save-btn\" onClick={signInGuestUser}>\r\n                    sign in\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GuestSignInModel;\r\n",["129","130"],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"140","line":108,"column":13,"nodeType":"141","endLine":113,"endColumn":4},{"ruleId":"139","severity":1,"message":"142","line":113,"column":6,"nodeType":"143","endLine":113,"endColumn":8,"suggestions":"144"},{"ruleId":"139","severity":1,"message":"145","line":62,"column":6,"nodeType":"143","endLine":62,"endColumn":19,"suggestions":"146"},{"ruleId":"135","severity":1,"message":"136","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":18},{"ruleId":"139","severity":1,"message":"147","line":103,"column":6,"nodeType":"143","endLine":103,"endColumn":16,"suggestions":"148"},{"ruleId":"139","severity":1,"message":"149","line":63,"column":8,"nodeType":"143","endLine":63,"endColumn":10,"suggestions":"150"},{"ruleId":"135","severity":1,"message":"151","line":10,"column":9,"nodeType":"137","messageId":"138","endLine":10,"endColumn":15},{"ruleId":"135","severity":1,"message":"152","line":2,"column":35,"nodeType":"137","messageId":"138","endLine":2,"endColumn":39},{"ruleId":"135","severity":1,"message":"153","line":16,"column":9,"nodeType":"137","messageId":"138","endLine":16,"endColumn":17},{"ruleId":"139","severity":1,"message":"154","line":66,"column":6,"nodeType":"143","endLine":66,"endColumn":8,"suggestions":"155"},{"ruleId":"135","severity":1,"message":"156","line":16,"column":10,"nodeType":"137","messageId":"138","endLine":16,"endColumn":24},{"ruleId":"135","severity":1,"message":"157","line":2,"column":25,"nodeType":"137","messageId":"138","endLine":2,"endColumn":33},{"ruleId":"135","severity":1,"message":"153","line":15,"column":11,"nodeType":"137","messageId":"138","endLine":15,"endColumn":19},{"ruleId":"135","severity":1,"message":"158","line":16,"column":11,"nodeType":"137","messageId":"138","endLine":16,"endColumn":19},{"ruleId":"131","replacedBy":"159"},{"ruleId":"133","replacedBy":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["163"],"React Hook useEffect has missing dependencies: 'dispatch' and 'userType'. Either include them or remove the dependency array.",["164"],"React Hook useEffect has a missing dependency: 'GuestSignIn'. Either include it or remove the dependency array.",["165"],"React Hook useEffect has missing dependencies: 'currUser.isAnonymous', 'currUser.uid', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["166"],"'status' is assigned a value but never used.","'Form' is defined but never used.","'settings' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispach' and 'userDeleted'. Either include them or remove the dependency array.",["167"],"'profileDetails' is assigned a value but never used.","'Dropdown' is defined but never used.","'currUser' is assigned a value but never used.",["161"],["162"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [setCurrentUser]",{"range":"178","text":"179"},"Update the dependencies array to be: [currentUser, dispatch, userType]",{"range":"180","text":"181"},"Update the dependencies array to be: [GuestSignIn, currUser]",{"range":"182","text":"183"},"Update the dependencies array to be: [currUser.isAnonymous, currUser.uid, dispatch, props]",{"range":"184","text":"185"},"Update the dependencies array to be: [dispach, userDeleted]",{"range":"186","text":"187"},[3250,3252],"[setCurrentUser]",[1882,1895],"[currentUser, dispatch, userType]",[3775,3785],"[GuestSignIn, currUser]",[2424,2426],"[currUser.isAnonymous, currUser.uid, dispatch, props]",[1707,1709],"[dispach, userDeleted]"]