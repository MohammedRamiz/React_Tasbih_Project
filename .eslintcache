[{"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\index.js":"1","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\App.js":"2","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reportWebVitals.js":"3","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\store.js":"4","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\CountingPage\\TasbihPage.js":"5","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\Load.js":"6","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\main.js":"7","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\HomePage.js":"8","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Firebase\\firebase.js":"9","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\action\\action.js":"10","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\users.js":"11","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\settings.js":"12","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\firebaseManager.js":"13","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\Body.js":"14","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Header\\Header.js":"15","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\SignIn.js":"16","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\History.js":"17","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihCard.js":"18","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihDotedCard.js":"19","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\AddBody.js":"20","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\NavigationMenu\\SideNav\\SideNav.js":"21","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\HistoryBlockTemplate\\Template.js":"22","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\LoadingScreen.js":"23"},{"size":712,"mtime":1623325884176,"results":"24","hashOfConfig":"25"},{"size":320,"mtime":1623304155214,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1622439681440,"results":"27","hashOfConfig":"25"},{"size":268,"mtime":1623325339509,"results":"28","hashOfConfig":"25"},{"size":233,"mtime":1623044797541,"results":"29","hashOfConfig":"25"},{"size":5080,"mtime":1632299104108,"results":"30","hashOfConfig":"25"},{"size":266,"mtime":1623649608328,"results":"31","hashOfConfig":"25"},{"size":1271,"mtime":1632304074892,"results":"32","hashOfConfig":"25"},{"size":736,"mtime":1628572751983,"results":"33","hashOfConfig":"25"},{"size":471,"mtime":1628486338951,"results":"34","hashOfConfig":"25"},{"size":215,"mtime":1623318494907,"results":"35","hashOfConfig":"25"},{"size":1119,"mtime":1628486338967,"results":"36","hashOfConfig":"25"},{"size":362,"mtime":1623675993622,"results":"37","hashOfConfig":"25"},{"size":4799,"mtime":1632298742463,"results":"38","hashOfConfig":"25"},{"size":2630,"mtime":1632304055450,"results":"39","hashOfConfig":"25"},{"size":7938,"mtime":1632230184165,"results":"40","hashOfConfig":"25"},{"size":3261,"mtime":1632317469390,"results":"41","hashOfConfig":"25"},{"size":4615,"mtime":1628486338908,"results":"42","hashOfConfig":"25"},{"size":484,"mtime":1632298714881,"results":"43","hashOfConfig":"25"},{"size":3675,"mtime":1632201261377,"results":"44","hashOfConfig":"25"},{"size":3229,"mtime":1632317002009,"results":"45","hashOfConfig":"25"},{"size":1106,"mtime":1623675432977,"results":"46","hashOfConfig":"25"},{"size":726,"mtime":1632296608496,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"190qrkf",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\index.js",[],["97","98"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\App.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reportWebVitals.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\store.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\CountingPage\\TasbihPage.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\Load.js",["99","100"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\main.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\HomePage.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Firebase\\firebase.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\action\\action.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\users.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\settings.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\reducer\\firebaseManager.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\Body.js",["101"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Header\\Header.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\SignIn\\SignIn.js",["102","103","104","105","106","107","108"],"import React, { useState, useEffect } from \"react\";\r\nimport db from \"../Firebase/firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSettings, setUpUserData } from \"../../action/action\";\r\nimport { provider, auth } from \"../Firebase/firebase\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst SignIn = props => {\r\n  const dispatch = useDispatch();\r\n  const settings = useSelector(s => s.Settings);\r\n  const currUser = useSelector(s => s.User);\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [isUserNameLoginVisible, setUserNameLogin] = useState(false);\r\n\r\n  //Guest User Sign In\r\n  const GuestSignIn = () => {\r\n    dispatch(updateSettings({ loading: true }));\r\n\r\n    auth.signInAnonymously().then(loginUser => {\r\n      dispatch(setUpUserData(loginUser.user));\r\n      db\r\n        .collection(\"NoOfGuests\")\r\n        .get()\r\n        .then(nog => {\r\n          var newCount = nog.docs[0].data().count + 1;\r\n          var name = \"Guest\" + newCount;\r\n          loginUser.user.updateProfile({\r\n            displayName: name,\r\n            uid: new Date().getTime()\r\n          });\r\n          db\r\n            .collection(\"GuestUsers\")\r\n            .doc(loginUser.user.uid)\r\n            .set({ Name: name, uid: loginUser.user.uid, Deleted: false });\r\n\r\n          nog.docs[0].ref.update({ count: newCount });\r\n\r\n          db\r\n            .collection(\"GuestUsers\")\r\n            .doc(loginUser.user.uid)\r\n            .get()\r\n            .then(currUser => {\r\n              db\r\n                .collection(\"Tasbihs\")\r\n                .where(\"Visible\", \"==\", true)\r\n                .get()\r\n                .then(tasbihs => {\r\n                  var allTasbihs = tasbihs.docs.map(doc => doc);\r\n                  var randPick = Math.floor(Math.random() * allTasbihs.length);\r\n\r\n                  currUser.ref.collection(\"Tasbihs\").add({\r\n                    count: 0,\r\n                    TasbihID: allTasbihs[randPick].id,\r\n                    Name: allTasbihs[randPick].data().Name,\r\n                    Status: \"Running\"\r\n                  });\r\n                  currUser.ref\r\n                    .collection(\"Settings\")\r\n                    .add(settings.settings)\r\n                    .then(set => {\r\n                      dispatch(\r\n                        updateSettings({\r\n                          isUserIn: true,\r\n                          path: set.path,\r\n                          loading: false,\r\n                          totalTasbihsCount: allTasbihs.length\r\n                        })\r\n                      );\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n  };\r\n\r\n  //Google Sign In\r\n  const LoginUser = () => {\r\n    auth.signInWithPopup(provider).then(res => {\r\n      dispatch(setUpUserData(res.user));\r\n      db\r\n        .collection(\"Users\")\r\n        .doc(res.user.uid)\r\n        .get()\r\n        .then(user => {\r\n          if (!user.exists) {\r\n            db\r\n              .collection(\"Users\")\r\n              .doc(user.id)\r\n              .set({ Name: res.user.displayName, uid: user.id })\r\n              .then(() => {\r\n                db\r\n                  .collection(\"Users\")\r\n                  .doc(currUser.uid)\r\n                  .get()\r\n                  .then(user => {\r\n                    db\r\n                      .collection(\"Tasbihs\")\r\n                      .where(\"Visible\", \"==\", true)\r\n                      .get()\r\n                      .then(tasbihs => {\r\n                        var allTasbihs = tasbihs.docs.map(doc => doc);\r\n                        var randPick = Math.floor(\r\n                          Math.random() * allTasbihs.length\r\n                        );\r\n\r\n                        //console.log(allTasbihs);\r\n\r\n                        user.ref.collection(\"Tasbihs\").add({\r\n                          count: 0,\r\n                          TasbihID: allTasbihs[randPick].id,\r\n                          Name: allTasbihs[randPick].data().Name,\r\n                          Status: \"Running\"\r\n                        });\r\n                        user.ref.collection(\"Settings\").add(settings.settings);\r\n                        dispatch(\r\n                          updateSettings({\r\n                            isUserIn: true,\r\n                            loading: false,\r\n                            totalTasbihsCount: allTasbihs.length\r\n                          })\r\n                        );\r\n                      });\r\n                  });\r\n              });\r\n          } else {\r\n            console.log(\"User found\");\r\n            dispatch(\r\n              updateSettings({\r\n                loading: false\r\n              })\r\n            );\r\n          }\r\n        });\r\n    });\r\n  };\r\n\r\n  const signInGuestUser = () => {\r\n    dispatch(updateSettings({ loading: true }));\r\n    db\r\n      .collection(\"GuestUsers\")\r\n      .where(\"Name\", \"==\", username)\r\n      .where(\"Deleted\", \"==\", false)\r\n      .get()\r\n      .then(data => {\r\n        if (!data.empty) {\r\n          auth.signInAnonymously().then(loginUser => {\r\n            const ref = data.docs[0].ref;\r\n            db\r\n              .collection(\"GuestUsers\")\r\n              .doc(loginUser.user.uid)\r\n              .set({\r\n                Name: data.docs[0].data().Name,\r\n                uid: loginUser.user.uid,\r\n                Deleted: false\r\n              })\r\n              .then(userData => {\r\n                ref.update({ Deleted: true });\r\n                asyncFunc(ref, loginUser.user);\r\n              });\r\n          });\r\n        } else {\r\n          console.log(\"User Does Not Exists\");\r\n          dispatch(updateSettings({ loading: false }));\r\n        }\r\n      })\r\n      .catch(er => {\r\n        console.log(er);\r\n      });\r\n  };\r\n\r\n  const asyncFunc = async (res, curretUser) => {\r\n    const tasbihs = await res.collection(\"Tasbihs\").get();\r\n    const set = await res.collection(\"Settings\").get();\r\n    const historyTasbihs = await res.collection(\"HistoryTasbihs\").get();\r\n\r\n    db\r\n      .collection(\"GuestUsers\")\r\n      .doc(curretUser.uid)\r\n      .get()\r\n      .then(doc => {\r\n        res.delete();\r\n        doc.ref\r\n          .collection(\"Settings\")\r\n          .get()\r\n          .then(doc => {\r\n            doc.docs[0].ref.delete();\r\n          });\r\n        extractData(doc.ref, tasbihs, \"Tasbihs\");\r\n        extractData(doc.ref, set, \"Settings\");\r\n        extractData(doc.ref, historyTasbihs, \"HistoryTasbihs\");\r\n\r\n        dispatch(setUpUserData(curretUser));\r\n      });\r\n  };\r\n\r\n  const extractData = (ref, data, type) => {\r\n    data.docs.forEach(data => {\r\n      ref.collection(type).add(data.data());\r\n    });\r\n  };\r\n\r\n  const getusername = e => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // db\r\n    //   .collection(\"SiteSettings\")\r\n    //   .onSnapshot(data => {\r\n    //     setUserNameLogin(data.docs[0].data().IsUserNameLoginVisible);\r\n    //   });\r\n\r\n    GuestSignIn();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"user-sign-in flex\">\r\n      {/* {isUserNameLoginVisible ? (\r\n        <>\r\n        <div className=\"sign-in-with-username\">\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                onChange={getusername}\r\n                type=\"email\"\r\n                placeholder=\"Your Username\"\r\n              />\r\n            </Form.Group>\r\n            <Button type=\"button\" onClick={signInGuestUser} variant=\"\">\r\n              Guest Sign In\r\n              </Button>\r\n          </Form>\r\n        </div>\r\n        <p>-- OR --</p>\r\n        </>\r\n      ) : ''} */}\r\n      <div className=\"sign-in-with\">\r\n        <button onClick={LoginUser} className=\"btn\">\r\n          Sign In With Google\r\n        </button>\r\n        <p >-- OR --</p>\r\n        <button className=\"skip-btn btn\" onClick={GuestSignIn}>\r\n          Sign up as a guest\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\History.js",["109"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihCard.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\Home\\TasbihDotedCard.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\ExtraComps\\AddBody.js",["110","111"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Dropdown } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport db from \"../Firebase/firebase.js\";\r\nimport \"./modal.css\";\r\n\r\nimport { updateSettings } from \"../../action/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst AddBody = props => {\r\n  const [name, setName] = useState(\"Choose Tasbih\");\r\n  const [noOfTasbihs, setNoOfTasbih] = useState([]);\r\n  const [tid, setTID] = useState(\"None\");\r\n  const userDeleted = props.userDeleted;\r\n\r\n  const settings = useSelector(s => s.Settings);\r\n  const dispach = useDispatch();\r\n\r\n  const handleClose = () => {\r\n    props.hideModal();\r\n  };\r\n\r\n  const handleAddData = () => {\r\n    if (name !== \"\") {\r\n      props.click(name, tid);\r\n      setName(\"Choose Tasbih\");\r\n    } else {\r\n      alert(\"Select Tasbih First\");\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (obj, e) => {\r\n    e.preventDefault();\r\n\r\n    var val = noOfTasbihs.filter(function (item) {\r\n      return item.Name === e.target.text;\r\n    });\r\n    setName(e.target.text);\r\n    console.log(val);\r\n    setTID(val[0].ID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let unSubs = db\r\n      .collection(\"Tasbihs\")\r\n      .where(\"Visible\", \"==\", true)\r\n      .onSnapshot(\r\n        snap => {\r\n          var noOfTasbihs = snap.docs.map(doc => {\r\n            return { ID: doc.id, Name: doc.data().Name };\r\n          });\r\n\r\n          dispach(\r\n            updateSettings({\r\n              totalTasbihsCount: noOfTasbihs.length\r\n            })\r\n          );\r\n          setNoOfTasbih(noOfTasbihs);\r\n\r\n          if (userDeleted) {\r\n            unSubs();\r\n          }\r\n        },\r\n        er => console.log(er)\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <Modal show={props.showModal} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Select Tasbih</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {\r\n          <div className=\"add-tasbih-name\" key=\"0\">\r\n            <div className=\"tasbih\">\r\n              {/* <select onChange={handleOnChange}>\r\n                <option>Choose Tasbih</option>\r\n                {noOfTasbihs.map(tasbih => {\r\n                  var disable = props.displayedIds.filter(t => {\r\n                    return t === tasbih.ID ? true : false;\r\n                  });\r\n\r\n                  return (\r\n                    <option disabled={disable[0]} key={tasbih.ID}>\r\n                      {tasbih.Name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select> */}\r\n\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                  {name}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  {noOfTasbihs.map(tasbih => {\r\n                    var disable = props.displayedIds.filter(t => {\r\n                      return t === tasbih.ID ? true : false;\r\n                    });\r\n\r\n                    return (\r\n                      <Dropdown.Item\r\n                        onSelect={handleOnChange}\r\n                        disabled={disable[0]}\r\n                        key={tasbih.ID}\r\n                      >\r\n                        {tasbih.Name}\r\n                      </Dropdown.Item>\r\n                    );\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        }\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"success\" className=\"save-btn\" onClick={handleAddData}>\r\n          Add\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddBody;\r\n","F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\NavigationMenu\\SideNav\\SideNav.js",["112"],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\History\\HistoryBlockTemplate\\Template.js",[],"F:\\Projects\\Practices\\React\\React_Tasbih_Project\\src\\Componets\\LoadPage\\LoadingScreen.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":169,"column":6,"nodeType":"123","endLine":169,"endColumn":8,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":138,"column":6,"nodeType":"123","endLine":138,"endColumn":8,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"127","line":6,"column":10,"nodeType":"119","messageId":"120","endLine":6,"endColumn":14},{"ruleId":"117","severity":1,"message":"128","line":6,"column":16,"nodeType":"119","messageId":"120","endLine":6,"endColumn":22},{"ruleId":"117","severity":1,"message":"129","line":14,"column":10,"nodeType":"119","messageId":"120","endLine":14,"endColumn":32},{"ruleId":"117","severity":1,"message":"130","line":14,"column":34,"nodeType":"119","messageId":"120","endLine":14,"endColumn":50},{"ruleId":"117","severity":1,"message":"131","line":138,"column":9,"nodeType":"119","messageId":"120","endLine":138,"endColumn":24},{"ruleId":"117","severity":1,"message":"132","line":203,"column":9,"nodeType":"119","messageId":"120","endLine":203,"endColumn":20},{"ruleId":"121","severity":1,"message":"133","line":215,"column":6,"nodeType":"123","endLine":215,"endColumn":8,"suggestions":"134"},{"ruleId":"121","severity":1,"message":"135","line":63,"column":8,"nodeType":"123","endLine":63,"endColumn":10,"suggestions":"136"},{"ruleId":"117","severity":1,"message":"137","line":16,"column":9,"nodeType":"119","messageId":"120","endLine":16,"endColumn":17},{"ruleId":"121","severity":1,"message":"138","line":66,"column":6,"nodeType":"123","endLine":66,"endColumn":8,"suggestions":"139"},{"ruleId":"117","severity":1,"message":"140","line":14,"column":10,"nodeType":"119","messageId":"120","endLine":14,"endColumn":24},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["143"],"React Hook useEffect has missing dependencies: 'currentUser.uid', 'dispatch', and 'isSkipped'. Either include them or remove the dependency array.",["144"],"'Form' is defined but never used.","'Button' is defined but never used.","'isUserNameLoginVisible' is assigned a value but never used.","'setUserNameLogin' is assigned a value but never used.","'signInGuestUser' is assigned a value but never used.","'getusername' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GuestSignIn'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has missing dependencies: 'currUser.isAnonymous', 'currUser.uid', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["146"],"'settings' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispach' and 'userDeleted'. Either include them or remove the dependency array.",["147"],"'profileDetails' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [setCurrentUser]",{"range":"158","text":"159"},"Update the dependencies array to be: [currentUser.uid, dispatch, isSkipped]",{"range":"160","text":"161"},"Update the dependencies array to be: [GuestSignIn]",{"range":"162","text":"163"},"Update the dependencies array to be: [currUser.isAnonymous, currUser.uid, dispatch, props]",{"range":"164","text":"165"},"Update the dependencies array to be: [dispach, userDeleted]",{"range":"166","text":"167"},[4800,4802],"[setCurrentUser]",[3824,3826],"[currentUser.uid, dispatch, isSkipped]",[6888,6890],"[GuestSignIn]",[2424,2426],"[currUser.isAnonymous, currUser.uid, dispatch, props]",[1731,1733],"[dispach, userDeleted]"]